// Code generated by MockGen. DO NOT EDIT.
// Source: mysqlclient.go

// Package mysql is a generated GoMock package.
package mysql

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMySQLClient is a mock of MySQLClient interface.
type MockMySQLClient struct {
	ctrl     *gomock.Controller
	recorder *MockMySQLClientMockRecorder
}

// MockMySQLClientMockRecorder is the mock recorder for MockMySQLClient.
type MockMySQLClientMockRecorder struct {
	mock *MockMySQLClient
}

// NewMockMySQLClient creates a new mock instance.
func NewMockMySQLClient(ctrl *gomock.Controller) *MockMySQLClient {
	mock := &MockMySQLClient{ctrl: ctrl}
	mock.recorder = &MockMySQLClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMySQLClient) EXPECT() *MockMySQLClientMockRecorder {
	return m.recorder
}

// Exec mocks base method.
func (m *MockMySQLClient) Exec(query string, args ...interface{}) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockMySQLClientMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockMySQLClient)(nil).Exec), varargs...)
}

// Init mocks base method.
func (m *MockMySQLClient) Init(config MySQLConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockMySQLClientMockRecorder) Init(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockMySQLClient)(nil).Init), config)
}

// Shutdown mocks base method.
func (m *MockMySQLClient) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockMySQLClientMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockMySQLClient)(nil).Shutdown))
}
